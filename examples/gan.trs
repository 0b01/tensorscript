use lin::Linear;
use reg::{BatchNorm1d};
use nonlin::{leaky_relu, tanh, sigmoid};

dim noise_dim = 100;
dim image_dim = 28;
dim flattened_image_dim = 784;
tsr noise = [?, noise_dim];
tsr flattened_image = [?, flattened_image_dim];
tsr image = [?, 1, image_dim, image_dim];

node Generator<noise -> image> {}
weights Generator<noise -> image> {
    lin1 = Linear::new(in=noise_dim, out=128);
    lin2 = Linear::new(in=128, out=256);
    bn1 = BatchNorm1d::new(num_features=256);
    lin3 = Linear::new(in=256, out=512);
    bn2 = BatchNorm1d::new(num_features=512);
    lin4 = Linear::new(in=512, out=1024);
    bn3 = BatchNorm1d::new(num_features=1024);
    lin5 = Linear::new(in=1024, out=flattened_image_dim);
}
graph Generator<noise -> image> {
    def new() -> Self {
        self
    }
    def forward {
        x
        |> lin1 |> leaky_relu(p=0.2)
        |> lin2 |> bn1 |> leaky_relu(p=0.2)
        |> lin3 |> bn2 |> leaky_relu(p=0.2)
        |> lin4 |> bn3 |> leaky_relu(p=0.2)
        |> lin5 |> tanh
        |> view(_, 1, image_dim, image_dim)
    }
}

node Discriminator<image -> [?, 1]> {}
weights Discriminator<image -> [?,1]> {
    lin1 = Linear::new(in=flattened_image_dim, out=512);
    lin2 = Linear::new(in=512, out=256);
    lin3 = Linear::new(in=256, out=1);
}
graph Discriminator<image -> [?,1]> {
    def new() -> Self {
        self
    }
    def forward {
        x |> view(?, flattened_image_dim)
        |> lin1 |> leaky_relu(p=0.2)
        |> lin2 |> leaky_relu(p=0.2)
        |> lin3 |> sigmoid
    }
}
