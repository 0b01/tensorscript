use lin::Linear;
use nonlin::{sigmoid, relu};

node Xor<[?,2] -> [?,1]> {
}

weights Xor<[?,2] -> [?,1]> {
    fc1 = Linear::new(in=2, out=3);
    fc2 = Linear::<[?,3]->[?,1]>::new(in=3, out=1);
}

graph Xor<[?,2] -> [?,1]> {
    def new() -> Self {
        self
    }

    def forward {
        x |> fc1 |> relu
          |> fc2 |> relu |> sigmoid
    }
}

// class Net(nn.Module):
//
//     def __init__(self):
//         super(Net, self).__init__()
//         self.fc1 = nn.Linear(2, 3, True)
//         self.fc2 = nn.Linear(3, 1, True)
//
//     def forward(self, x):
//         x = F.sigmoid(self.fc1(x))
//         x = self.fc2(x)
//         return x
//
