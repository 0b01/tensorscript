whitespace = _{ space | newline  }
comment = _{ line_comment }
line_comment = _{  "//" ~ (!newline ~ any)* }

newline = _{ "\n" | "\r\n" }
space   = _{ " " | "\t" }

// keyword
batch_lit = @{ "?" }
dim_lit = _{ "dim" }
tsr_lit = _{ "tsr" }
node_lit = _{ "node" }
view_lit = _{ "view" }
weights_lit = _{ "weights" }
graph_lit = _{ "graph" }
fn_lit = _{ "fn" }
break_lit = { "break" }
const_lit = { "const" }
continue_lit = { "continue" }
crate_lit = { "crate" }
else_lit = { "else" }
enum_lit = { "enum" }
false_lit = { "false" }
for_lit = { "for" }
if_lit = { "if" }
let_lit = { "let" }
match_lit = { "match" }
mod_lit = { "mod" }
move_lit = { "move" }
return_lit = { "return" }
self_lit = { "self" }
true_lit = { "true" }
ty_lit = { "type" }
use_lit = { "use" }
where_lit = { "where" }
while_lit = { "while" }
print_lit = { "print" }
keyword = { batch_lit | dim_lit | tsr_lit | node_lit | weights_lit | graph_lit | view_lit | break_lit | const_lit | 
             continue_lit | crate_lit | else_lit | enum_lit | true_lit | false_lit |
             fn_lit | for_lit | if_lit | let_lit | match_lit | mod_lit | move_lit | 
             return_lit | self_lit | ty_lit | use_lit | 
             where_lit | while_lit | print_lit }


binary_op = _{
  op_expo   |
  op_mult   |
  op_div    |
  op_mod    |
  op_add    |
  op_sub    |
  op_bsl    |
  op_bsr    |
  op_and    |
  op_band   |
  op_or     |
  op_bor    |
  op_bxor   |
  op_lte    |
  op_lt     |
  op_gte    |
  op_gt     |
  op_eq     |
  op_ne     |
  op_assign
}
op_expo   = { "**" }
op_mult   = { "*" }
op_not    = { "!" }
op_div    = { "/" }
op_mod    = { "%" }
op_add    = { "+" }
op_sub    = { "-" }
op_bsl    = { "<<" }
op_bsr    = { ">>" }
op_band   = { "&" }
op_bor    = { "|" }
op_bxor   = { "^" }
op_lt     = { "<" }
op_lte    = { "<=" }
op_gt     = { ">" }
op_gte    = { ">=" }
op_eq     = { "==" }
op_ne     = { "!=" }
op_and    = { "&&" }
op_or     = { "||" }
op_assign = { "=" }


literal = _{
  num_lit  |
  bool_lit 
}

// bool
bool_lit = { true_lit | false_lit }
// int
digit   = _{ '0'..'9' }
int_lit =  @{ digit ~ (digit | "_")* }
plus  = _{ "+" }
// float
minus = _{ "-" }
exp   = _{ ^"e" ~ (plus | minus)? ~ int_lit }
float_lit = @{
    int_lit ~ "." ~ int_lit? ~ exp? |
    int_lit ~ exp
}
num_lit = _{ float_lit | int_lit }

// ident
lower = _{ 'a'..'z' }
upper = _{ 'A'..'Z' }
alpha = _{ lower | upper }
ident = @{ (!digit ~ (alpha | digit | "_")+ ) | "?" }
ident_list = { ident ~ ("," ~ ident)+ ~ ","? }
cap_ident = @{ upper ~ (alpha|digit| "_")* }
upper_ident = @{ (upper|digit)* }

use_stmt = { use_lit ~ ident ~ "::" ~ ( "{" ~ ident_list ~ "}" | ident ) ~ ";"}

// type signature

// type identifier cannot be just an integer
ty_ident = @{ !int_lit ~  (alpha | digit | "?" | "_")+ }
ty_ident_list = { ty_ident ~ ("," ~ ty_ident)* }
fn_ty_sig = { "<" ~ tensor_ty ~ "->" ~ tensor_ty ~ ">" }
ty_sig = { "<"? ~ tensor_ty ~ ">"? }
tensor_ty_sig = _{ "[" ~ ty_ident_list ~ "]" }
tensor_ty = _{ tensor_alias_ty | tensor_ty_sig }
tensor_alias_ty = _{ cap_ident }

dim_assign = _{ dim_lit ~ upper_ident ~ op_assign ~ int_lit ~ ";" }
tsr_assign = _{ tsr_lit ~ upper_ident ~ op_assign ~ tensor_ty ~ ";" }
node_assign = { dim_assign | tsr_assign }
node_decl_body = { "{" ~ node_assign* ~ "}" }
node_decl_head = { node_lit ~ cap_ident ~ fn_ty_sig }
node_decl = { node_decl_head ~ node_decl_body }


weights_assign = { ident ~ op_assign ~
                   cap_ident ~ "::" ~ fn_ty_sig ~ "::" ~ fn_app ~ ";"
                 }
weights_decl_body = { "{" ~ weights_assign* ~ "}" }
weights_decl_head = { weights_lit ~ cap_ident ~ fn_ty_sig }
weights_decl = { weights_decl_head ~ weights_decl_body }

graph_decl_body = { "{" ~ fn_decls ~ "}" }
graph_decl_head = { graph_lit ~ cap_ident ~ fn_ty_sig }
graph_decl = { graph_decl_head ~ graph_decl_body }



while_loop = { while_lit ~ expr ~ block }

conditional = { "if" ~ expr ~ block ~ (op_else_if ~ expr ~ block)* ~ (op_else ~ block)? }
op_else_if = { "else if" }
op_else = { "else" }


fn_decls = { fn_decl* }
fn_decl_param = { ("(" ~ ")") | ("(" ~ fn_decl_params ~ ")") }
fn_decl_sig = { fn_decl_param ~ ("->" ~ ty_sig)? }
fn_decl_params = { fn_decl_arg ~ ("," ~ fn_decl_arg)* }
fn_decl_arg = { ident ~ (":" ~ ty_sig)? }
fn_decl_head = { fn_lit ~ ident ~ fn_decl_sig }
fn_decl = { fn_decl_head ~ block }

fn_app_param = { ("(" ~ ")") | ("(" ~ fn_app_args ~ ")") }
fn_app_arg_pair = { ident ~ "=" ~ expr }
fn_app_arg = { ident ~ "=" ~ expr }
fn_app_args = { (fn_app_arg ~ ",")* ~ fn_app_arg }
fn_app = { ident ~ "(" ~ fn_app_args? ~ ")" }


pipes = { expr_item  ~ ("|>" ~ expr)+ }

field_access = { ident ~ "." ~ ident ~ fn_app_param? }

view_fn = { view_lit ~ "(" ~ ( batch_lit | cap_ident)? ~ ("," ~ ( batch_lit |cap_ident))* ~ ","? ~ ")" }

expr_item = _{ view_fn | field_access | literal | bool_not | fn_app | ident | conditional }
expr = { expr_item ~ !"|>" | pipes }

bool_not = _{ op_not ~ expr }

// This allows {} and {statement; statement; statement;} and {statement; expr} and {expr}
block = { "{" ~ stmts ~ expr? ~ "}" }
stmts = { stmt* }

stmt = { assignment | while_loop | conditional | (expr ~ ";") | comment }

assignment = { ident ~ op_assign ~ expr ~ ";" }



input = _{ soi ~ items ~ eoi }
items = _{ item* }
item = _{ use_stmt | graph_decl | weights_decl | node_decl }

