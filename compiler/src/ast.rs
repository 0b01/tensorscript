#[derive(Debug, PartialEq, Clone)]
pub enum AST {
  Integer(i64),
  Float(f64),
  String(String),
  Atom(String),
  True,
  False,
  UnaryNot(Box<AST>),
  UnaryComplement(Box<AST>),
  UnaryPlus(Box<AST>),
  UnaryMinus(Box<AST>),
  Braced(Box<AST>),
  Constant(String),
  LocalAccess(String),
  CallWithImplicitSelf(Box<AST>, Vec<(AST, AST)>),
  List(Vec<AST>),
  Function(Vec<AST>),
  Clause(Vec<(AST, AST)>, Box<AST>),
  Block(Vec<AST>),
  WeightsDecl {
    name: String,
    type_sig: Box<AST>,
    initialization: Box<AST>,
  },
  NodeDecl {
    name: String,
    type_sig: Box<AST>,
    initialization: Box<AST>,
  },
  WeightsAssign {
    name: String,
    mod_name: String,
    mod_sig: Box<AST>,
    func: Box<AST>,
  },
  FnCall {
    name: String,
    args: Box<AST>,
  },
  FnCallArg {
    name: String,
    arg: Box<AST>,
  },
  UseStmt(String, Vec<String>),
  Start,
  TypeSig(Vec<String>, Vec<String>),
  MacroAssign(String, Box<AST>),
}

#[derive(Debug, PartialEq, Clone)]
pub enum Op {
  Expo,
  Mult,
  Div,
  Mod,
  Add,
  Sub,
  ShL,
  ShR,
  BAnd,
  BOr,
  BXor,
  Lt,
  LtE,
  Gt,
  GtE,
  Eq,
  NotEq,
  And,
  Or,
  Assign,
}
